This file is for internal organization. I figure that I might aswell post it to the github repo since It will probably represent a fair bit of my working out. The more important information on this document should find itself into the README later.


===============================================
 The process (includes some worries and stuff)
===============================================

data collection
   given directory, read all of weather files into one table
      # This uses a python for loop, but only for about 20 values. shouldn't matter
      # header=14 is used as param to indicate start of data. Might want to do this dynamically instead of with a magic number
   given directory, read all of picture files into one table
      # This uses a python for loop, with about 5000 values. TODO take a look into this, it might be a good spot for optimization.
      # Add filename to each entry as well, since it contains date information
      # Data is given with 2 columns, first is base filename, second is an array of [r,g,b] triples
      # Helper function exists to extract "year-month-day hour:minute" from fileName
   join both tables into a super table!
      # Get Date/Time for pictures (use helper function)
      # Set both table's index to Date/Time
      # Join them together (with an inner join)

clean & shape data
   # Throw out rows with no Weather Reading.
   # Throw out rows with Data Quality M or E
   # Select Columns [Pixels, Weather]
   # Select Columns as well, in case I might use them [Temp, Pressure, Humidity, Visibility]
   # TODO if I did some of this earlier, I could potentially avoid over 50% of the work reading in images

image feature extraction
   # This is the hardest part I think. I have a few theories of what ~might work.
   # I am making a separate file to encapsulate all the options here.
      1) overall brightness
      2) overall r,g,b
      3) a brightness feature per pixel
   # STUB names are kind of needed for these columns

modelling
   # Step Process
      1) choose labels you care about
      2) feed data to create training data
      3) test with any number of classifiers
   # Classifier Options
      1) knn (choose n)
      2) svc (choose C, gamma)
      3) bayes
      # Todo Consider adding regression
   # STUB add pipelining for things like PCA





=========
 The plan
=========

~roughly

My goal/task:
   Given a picture, declare:
   1) It's Clear/Somewhat Cloudy/Very Cloudy
   2) It's Rainy/Not Raining
   3) It's Snowing/Not Snowing
   4) There's Fog/No Fog

(2) Write a report
- approximately 2 pages
- cater to technically literate without using heavy jargon
* steps taken from project outline
i)   The problem you are addressing, particularly how you refined the provided idea.
ii)  The data that you used: how it was gathered, cleaned, etc.
iii) Techniques you used to analyse the data.
iv)  Your results/findings/conclusions.
v)   Some appropriate visualization of your data/results.
vi)  Limitations: problems you encountered, things you would do if you had more time, things you should have done in retrospect, etc.

Available Data That may be relevent:
Weather-data
   - Date (Year, Month, Day, Time)
   - Data Quality
   - Weather (Raining? Cloudy?, Fog?, Thunderstorm? Snow?)
   - Temp, Humidity, Pressure, Visibility
Katkam-images
   - 5046 images
   - only 2248 that I care about (with weather classifications)
   - each 256*192 resolution

The form I want the table in
   Index: Date
   Weather_Clear: "Clear" "Somewhat Cloudy" "Very Cloudy"
   Weather_Snow: "Yes" "No"
   Weather_Rain: "Yes" "No"
   Fog: "Yes" "No"
   FEATURES

Problems:
   Extracting the features from the image is a pain
   It's somewhat difficult to get everything to work efficiently

Ideas:

   use PCA to automatically reduce features
   lower resolution to reduce features.

   Use overall brightness as feature
   Use tint (red green blue) as feature
   Use outlines pixels as features
   Use grayscale pixels as features

   Make more efficient by sharing X_data for each of y features
   Make more efficient by only reading in data for relevent images
   Make more efficient by getting rid of python loops and comprehensions
   Make more efficient by doing more stuff in place

Reminders!
add ggbaker, yajiez as developers
